Roadmap for Setting Up LMS Applications on AWS EC2 & RDS

This comprehensive roadmap covers creating your AWS resources (RDS Database, EC2 Instance) and then deploying your LMS applications.

---

### **Part 1: AWS Console Setup - Create RDS PostgreSQL Database**

This will be your backend database server.

1.  **Log in to AWS Management Console:** Go to [aws.amazon.com/console/](https://aws.amazon.com/console/) and sign in.
2.  **Navigate to RDS:**
    *   In the search bar at the top, type "RDS" and select "RDS - Manage relational databases".
3.  **Start Database Creation:**
    *   Click on **"Create database"**.
4.  **Choose Database Creation Method:**
    *   Select **"Standard create"**.
5.  **Choose Engine Options:**
    *   Select **"PostgreSQL"**.
6.  **Choose Version and Templates:**
    *   **PostgreSQL version:** Keep the default or choose a recent stable one (e.g., PostgreSQL 14.x or 15.x).
    *   **Templates:** Select **"Free tier"** (essential to avoid charges).
7.  **Database Instance Details:**
    *   **DB instance identifier:** `lms-tejas-db` (or a name of your choice).
    *   **Master username:** `postgres` (as specified in your project details).
    *   **Master password:** Enter a strong password. For your `Connect Backend` you specified `Connect#Tejas`, and for `LMS Backend` you specified `Backend#Tejas`. You'll need to remember which is for which, or create a single master password here and manage application-specific users later. For simplicity, let's assume a generic `YourSuperSecretRDS!Password`. **Make a note of this password.**
    *   **Confirm password:** Re-enter the same password.
8.  **DB Instance Size:**
    *   Should default to `db.t3.micro` or `db.t2.micro` (Free tier eligible). Leave as is.
9.  **Storage:**
    *   Leave defaults (e.g., "General Purpose SSD (gp2)", 20 GiB).
10. **Connectivity:**
    *   **VPC:** Keep the default VPC.
    *   **Subnet group:** Keep the default.
    *   **Publicly accessible:** Select **"Yes"**. (This is important for initial setup so your EC2 can reach it easily).
    *   **VPC security group (firewall):**
        *   Choose **"Create new"**.
        *   **New VPC security group name:** `lms-rds-sg` (or a name of your choice).
    *   **Availability zone:** Keep "No preference".
11. **Database Authentication:**
    *   Select **"Password authentication"**.
12. **Additional configuration (Optional but useful):**
    *   **Initial database name:** `lms_main_db` (or a name your application will connect to).
13. **Create database:** Click the **"Create database"** button.

*Wait for the database status to change to "Available". Once it's ready, navigate to its details and find its **Endpoint** under "Connectivity & security". You will need this endpoint URL for your Django `settings.py` files.*

---

### **Part 2: AWS Console Setup - Create EC2 Ubuntu Instance**

This will be your virtual server where your Python applications will run.

1.  **Log in to AWS Management Console:** If not already.
2.  **Navigate to EC2:**
    *   In the search bar at the top, type "EC2" and select "EC2 - Virtual servers in the cloud".
3.  **Launch Instance:**
    *   Click the **"Launch instance"** button.
4.  **Name and Tags:**
    *   **Name:** `lms-tejas-server` (or a name of your choice).
5.  **Application and OS Images (Amazon Machine Image - AMI):**
    *   **Quick Start:** Select **"Ubuntu"**.
    *   **Ubuntu Server:** Choose the latest LTS version (e.g., "Ubuntu Server 22.04 LTS (HVM), SSD Volume Type").
    *   **Architecture:** Leave as `64-bit (x86)`.
6.  **Instance Type:**
    *   Select **"t2.micro"** (Free Tier eligible).
7.  **Key pair (login):**
    *   **THIS IS CRUCIAL.**
    *   **Create a new key pair:**
        *   **Key pair name:** Type `tejas-instance-key`.
        *   **Key pair type:** RSA
        *   **Private key file format:** `.pem`
        *   Click **"Create key pair"**. **Your browser will automatically download `tejas-instance-key.pem`. SAVE THIS FILE SECURELY â€“ you cannot download it again!** (This is the key mentioned in your original SSH command).
8.  **Network settings:**
    *   **VPC:** Select the default VPC.
    *   **Subnet:** Keep "No preference".
    *   **Auto-assign public IP:** Ensure **"Enable"** is selected.
    *   **Firewall (security groups):**
        *   Choose **"Create security group"**.
        *   **Security group name:** `lms-ec2-sg` (or a name of your choice).
        *   **Description:** "Security group for LMS EC2 instance".
        *   **Inbound security group rules:**
            *   **SSH:** Type: SSH, Source type: Anywhere (0.0.0.0/0).
            *   **ADD RULE (for Connect Backend):** Type: Custom TCP, Port range: **8000**, Source type: Anywhere (0.0.0.0/0).
            *   **ADD RULE (for LMS Backend):** Type: Custom TCP, Port range: **8001**, Source type: Anywhere (0.0.0.0/0).
            *   **ADD RULE (for LMS Frontend):** Type: Custom TCP, Port range: **8002**, Source type: Anywhere (0.0.0.0/0).
9.  **Configure storage (volumes):**
    *   Leave defaults (e.g., 8 GiB, gp2).
10. **Launch instance:** Click the **"Launch instance"** button.

*Once launched, go to the EC2 Instances page, select your `lms-tejas-server` instance, and note its **Public IPv4 address**. This is your `54.91.55.11` equivalent from the examples.*

---

### **Part 3: EC2 Instance Terminal Setup & Application Deployment**

Now you'll connect to your EC2 instance and set up your applications.

1.  **Connect to EC2 Instance via SSH:**
    *   Open your local terminal (or Git Bash/WSL on Windows).
    *   **IMPORTANT:** Replace `YOUR_EC2_PUBLIC_IP` with the actual Public IPv4 address you noted from your EC2 instance. Ensure `tejas-instance-key.pem` is in the directory you're running the command from, or provide its full path.
    ```bash
    ssh -i tejas-instance-key.pem ubuntu@YOUR_EC2_PUBLIC_IP
    ```

2.  **Update System Packages and Install Core Dependencies:**
    *   Once connected to your EC2 instance, execute these commands:
    ```bash
    sudo apt update
    sudo apt install python3-venv python3-dev libpq-dev postgresql postgresql-contrib nginx curl -y
    ```

3.  **Clone the Project Repositories from Bitbucket:**
    *   Execute these commands. You will be prompted for the Git password `T#intern@sis` for each clone.
    ```bash
    git clone -b Kleosys_LMS_backend https://interntestkleosys@bitbucket.org/sinhaitsolution/aws-test.git LMS_Backend_Tejas
    git clone -b Binary_Bizz_LMS https://interntestkleosys@bitbucket.org/sinhaitsolution/aws-test.git LMS_Connect_Tejas
    git clone -b kleosys_LMS_frontend https://interntestkleosys@bitbucket.org/sinhaitsolution/aws-test.git LMS_Frontend_Tejas
    ```

4.  **Setup Each Project (Virtual Environment, Dependencies, Settings):**

    **A. For `LMS_Connect_Tejas` (Connect Backend):**
    ```bash
    cd ~/LMS_Connect_Tejas/
    python3 -m venv venv
    source venv/bin/activate
    pip install django psycopg2-binary djangorestframework django-cors-headers djangorestframework-simplejwt gunicorn whitenoise
    nano binarybiz_connect_backend/settings.py
    ```
    *   **INSIDE NANO EDITOR for `binarybiz_connect_backend/settings.py`:**
        *   **Configure the RDS Database:** Find `DATABASES` setting. Update it with your RDS **Endpoint**, `NAME` (e.g., `lms_main_db`), `USER: postgres`, and `PASSWORD: Connect#Tejas` (or the generic password you set if using one for the master user).
        *   **Configure `ALLOWED_HOSTS`:** Add your EC2 instance's **Public IPv4 address** (e.g., `54.91.55.11`) to the list: `ALLOWED_HOSTS = ['YOUR_EC2_PUBLIC_IP', '.yourdomain.com']`.
        *   **Configure WhiteNoise (for static files):**
            *   Add `'whitenoise.middleware.WhiteNoiseMiddleware'` to your `MIDDLEWARE` list.
            *   Add `STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'` to your settings.
        *   **Save and Exit Nano:** Press `Ctrl+O` (then Enter), then `Ctrl+X`.
    ```bash
    deactivate
    ```

    **B. For `LMS_Backend_Tejas` (LMS Backend):**
    ```bash
    cd ~/LMS_Backend_Tejas/
    python3 -m venv venv
    source venv/bin/activate
    pip install django psycopg2-binary djangorestframework django-cors-headers djangorestframework-simplejwt gunicorn whitenoise
    nano lead_management_system/settings.py
    ```
    *   **INSIDE NANO EDITOR for `lead_management_system/settings.py`:**
        *   **Configure the RDS Database:** Update `DATABASES` with your RDS **Endpoint**, `NAME` (e.g., `lms_main_db`), `USER: postgres`, and `PASSWORD: Backend#Tejas`.
        *   **Configure `ALLOWED_HOSTS`:** Add your EC2 instance's **Public IPv4 address** to `ALLOWED_HOSTS`.
        *   **Configure WhiteNoise (if applicable):** Add `'whitenoise.middleware.WhiteNoiseMiddleware'` to `MIDDLEWARE` and `STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'` if this backend also serves static files.
        *   **Save and Exit Nano:** Press `Ctrl+O` (then Enter), then `Ctrl+X`.
    ```bash
    deactivate
    ```

    **C. For `LMS_Frontend_Tejas` (LMS Frontend):**
    ```bash
    cd ~/LMS_Frontend_Tejas/
    python3 -m venv venv
    source venv/bin/activate
    pip install django psycopg2-binary djangorestframework django-cors-headers djangorestframework-simplejwt gunicorn whitenoise
    nano lead_management_system/settings.py
    ```
    *   **INSIDE NANO EDITOR for `lead_management_system/settings.py`:**
        *   **Configure `ALLOWED_HOSTS`:** Add your EC2 instance's **Public IPv4 address** to `ALLOWED_HOSTS`.
        *   **Configure WhiteNoise:** Ensure `'whitenoise.middleware.WhiteNoiseMiddleware'` is in `MIDDLEWARE` and `STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'` as this project is serving the frontend static files.
        *   **Save and Exit Nano:** Press `Ctrl+O` (then Enter), then `Ctrl+X`.
    ```bash
    deactivate
    ```

5.  **Start All Applications with Gunicorn:**
    *   Execute these commands sequentially on your EC2 instance. Each `&` will run the process in the background.
    ```bash
    # Stop any old Gunicorn processes (optional, but good practice if rerunning)
    pkill gunicorn

    # Start Connect Backend (port 8000)
    cd ~/LMS_Connect_Tejas/
    source venv/bin/activate
    gunicorn --bind 0.0.0.0:8000 binarybiz_connect_backend.wsgi:application &
    deactivate

    # Start LMS Backend (port 8001)
    cd ~/LMS_Backend_Tejas/
    source venv/bin/activate
    gunicorn --bind 0.0.0.0:8001 lead_management_system.wsgi:application &
    deactivate

    # Start LMS Frontend (port 8002)
    cd ~/LMS_Frontend_Tejas/
    source venv/bin/activate
    gunicorn --bind 0.0.0.0:8002 lead_management_system.wsgi:application & --timeout 120
    deactivate
    ```

6.  **Update IP Addresses in Code (Only if your EC2 IP changed AFTER initial setup):**
    *   If you need to update hardcoded IPs in your project files (e.g., if you provisioned a new EC2 instance with a different IP than your code expected), use this command.
    *   **IMPORTANT:** Replace `OLD_IP` and `NEW_IP` with your actual previous and current EC2 Public IPv4 addresses.
    ```bash
    OLD_IP="52.90.150.227" # The old IP that might be in your code
    NEW_IP="YOUR_EC2_PUBLIC_IP" # Your current EC2 instance's public IP

    find LMS_Connect_Tejas LMS_Backend_Tejas LMS_Frontend_Tejas -type f \( -name "*.py" -o -name "*.js" -o -name "*.json" \) -exec sed -i "s/$OLD_IP/$NEW_IP/g" {} \;
    ```

---

### **Part 4: Verification**

1.  **Open your web browser** and test the endpoints using your EC2 instance's **current Public IPv4 address** (e.g., `YOUR_EC2_PUBLIC_IP`):
    *   **Connect Backend:** `http://YOUR_EC2_PUBLIC_IP:8000/api/v1/accounts/login`
    *   **LMS Backend:** `http://YOUR_EC2_PUBLIC_IP:8001/api/lms/v1/login/`
    *   **LMS Frontend:** `http://YOUR_EC2_PUBLIC_IP:8002/lms/login/`
2.  **Login Credentials:** Use `username: cickadmn`, `password: Demo@123` to test.

---
**Important Notes:**

*   **Security:** Using `0.0.0.0/0` (Anywhere) for security group inbound rules is for ease of setup. In a production environment, you should restrict access to known IP ranges or specific VPCs/subnets for better security.
*   **Persistent Processes:** The `&` runs Gunicorn in the background, but if your EC2 instance reboots, these processes will not automatically restart. For production, you would set up a process manager like `systemd` or `supervisor` to ensure your Gunicorn applications restart automatically.
*   **Static Files & Nginx:** While WhiteNoise helps serve static files, for larger deployments and better performance, you'd typically configure Nginx as a reverse proxy in front of Gunicorn, also serving static files directly.
*   **RDS Endpoint:** Remember that your RDS database has its own unique endpoint (like `lms-tejas-db.abcdefghijk.us-east-1.rds.amazonaws.com`) that you must configure in your Django `settings.py` files, not the EC2 IP.